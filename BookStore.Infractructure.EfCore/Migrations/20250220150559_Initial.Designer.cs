// <auto-generated />
using System;
using BookStore.Infrastructure.EfCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookStore.Infractructure.EfCore.Migrations
{
    [DbContext(typeof(BookStoreDbContext))]
    [Migration("20250220150559_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("BookStore.Domain.Model.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Biography")
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<string>("Patronymic")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Роберт",
                            LastName = "Мартин"
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Стив",
                            LastName = "Макконнелл"
                        },
                        new
                        {
                            Id = 3,
                            FirstName = "Джон",
                            LastName = "Карр"
                        });
                });

            modelBuilder.Entity("BookStore.Domain.Model.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Annotation")
                        .HasColumnType("longtext");

                    b.Property<string>("Isbn")
                        .HasColumnType("longtext");

                    b.Property<int?>("PageCount")
                        .HasColumnType("int");

                    b.Property<string>("Publisher")
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PageCount = 464,
                            Title = "Чистый код. Создание, анализ и рефакторинг",
                            Year = 2008
                        },
                        new
                        {
                            Id = 2,
                            PageCount = 352,
                            Title = "Чистая архитектура. Искусство разработки программного обеспечения",
                            Year = 2017
                        },
                        new
                        {
                            Id = 3,
                            PageCount = 272,
                            Title = "Чистый Agile. Основы гибкости",
                            Year = 2023
                        },
                        new
                        {
                            Id = 4,
                            PageCount = 384,
                            Title = "Идеальная работа. Программирование без прикрас",
                            Year = 2023
                        },
                        new
                        {
                            Id = 5,
                            PageCount = 224,
                            Title = "Идеальный программист. Как стать профессионалом разработки ПО",
                            Year = 2011
                        },
                        new
                        {
                            Id = 6,
                            PageCount = 896,
                            Title = "Совершенный код. Мастер-класс",
                            Year = 2005
                        },
                        new
                        {
                            Id = 7,
                            PageCount = 234,
                            Title = "Профессиональная разработка программного обеспечения",
                            Year = 2006
                        },
                        new
                        {
                            Id = 8,
                            PageCount = 240,
                            Title = "Остаться в живых. Руководство для менеджера программных проектов",
                            Year = 2006
                        });
                });

            modelBuilder.Entity("BookStore.Domain.Model.BookAuthor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BookId");

                    b.ToTable("BookAuthors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            BookId = 1
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 1,
                            BookId = 2
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 1,
                            BookId = 3
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 1,
                            BookId = 4
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 1,
                            BookId = 5
                        },
                        new
                        {
                            Id = 6,
                            AuthorId = 2,
                            BookId = 6
                        },
                        new
                        {
                            Id = 7,
                            AuthorId = 2,
                            BookId = 7
                        },
                        new
                        {
                            Id = 8,
                            AuthorId = 2,
                            BookId = 8
                        });
                });

            modelBuilder.Entity("BookStore.Domain.Model.BookAuthor", b =>
                {
                    b.HasOne("BookStore.Domain.Model.Author", "Author")
                        .WithMany("BookAuthors")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookStore.Domain.Model.Book", "Book")
                        .WithMany("BookAuthors")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("BookStore.Domain.Model.Author", b =>
                {
                    b.Navigation("BookAuthors");
                });

            modelBuilder.Entity("BookStore.Domain.Model.Book", b =>
                {
                    b.Navigation("BookAuthors");
                });
#pragma warning restore 612, 618
        }
    }
}
